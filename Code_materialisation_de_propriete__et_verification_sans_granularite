package com.mycompany.implementation;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.reasoner.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import org.semanticweb.HermiT.ReasonerFactory;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.update.UpdateFactory;
import org.apache.jena.update.UpdateRequest;
import org.apache.jena.update.UpdateAction;
import java.io.StringReader;
import org.apache.jena.query.DatasetFactory;
import org.apache.jena.query.ParameterizedSparqlString;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdfconnection.RDFConnection;
import org.apache.jena.rdfconnection.RDFConnectionFactory;
import org.apache.jena.riot.RDFDataMgr;
import org.apache.jena.sparql.lang.SPARQLParser;
import org.apache.jena.sparql.lang.SPARQLParserFactory;
import org.apache.jena.update.UpdateExecutionFactory;
import org.apache.jena.update.UpdateProcessor;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.formats.TurtleDocumentFormat;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.model.OWLOntologyChange;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;

import org.eclipse.rdf4j.query.*;
import org.eclipse.rdf4j.repository.*;
import org.eclipse.rdf4j.repository.http.HTTPRepository;

/**
 *
 * @author hbeich
 */
public class Implementation {
    
    private static final String QUERY_PATH = "/path/to/your/VerificationSansGranularite.txt";
    private static final String REPOSITORY = "http://localhost:7200/repositories/verifiRegSem";
    private static final int MAX_EXECUTION_TIME = 24;  // en heures


    public static void main(String[] args) throws Exception {

     
        // URL de votre point d'accès SPARQL GraphDB
        String sparqlEndpoint = "http://localhost:7200/repositories/verifiRegSem";
        HTTPRepository repository = new HTTPRepository(REPOSITORY);
        RepositoryConnection conn = repository.getConnection();

        
        // Lire les requêtes à partir du fichier
        List<String> sparqlQueries = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        try {
            for (String line : Files.readAllLines(Paths.get("insertQueries.txt"))) {
                if (line.trim().equalsIgnoreCase("START QUERY")) {
                    // Début d'une nouvelle requête, ajouter la requête précédente à la liste
                    if (sb.length() > 0) {
                        sparqlQueries.add(sb.toString());
                        sb.setLength(0);  // Réinitialiser le StringBuilder
                    }
                } else if (line.trim().equalsIgnoreCase("END QUERY")) {
                    // Fin d'une requête, ajouter la requête actuelle à la liste
                    if (sb.length() > 0) {
                        sparqlQueries.add(sb.toString());
                        sb.setLength(0);  // Réinitialiser le StringBuilder
                    }
                } else {
                    // Ajouter la ligne à la requête en cours
                    sb.append(line).append('\n');
                }
            }
            // Ajouter la dernière requête si elle n'a pas encore été ajoutée
            if (sb.length() > 0) {
                sparqlQueries.add(sb.toString());
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
        
        // Exécutez chaque requête 10 fois
        for (String sparqlQuery : sparqlQueries) {
            List<Long> executionTimes = new ArrayList<>();
            for (int i = 0; i < 10; i++) {
                long startTime = System.nanoTime();
                executeInsertQuery(sparqlQuery);
                long endTime = System.nanoTime();
                executionTimes.add(endTime - startTime);
            }
            
            // Calculez le temps moyen d'exécution et l'écart-type
            double avgTime = executionTimes.stream().mapToLong(Long::longValue).average().orElse(0);
            double variance = executionTimes.stream().mapToDouble(time -> Math.pow(time - avgTime, 2)).sum() / executionTimes.size();
            double stdDev = Math.sqrt(variance);
            
            System.out.println("Temps moyen d'exécution : " + avgTime / 1e6 + " ms");
            System.out.println("Écart-type : " + stdDev / 1e6 + " ms");
        }
        
        
        // Lire les requêtes depuis un fichier texte
        List<String> sparqlQueries1 = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("VerificationSansGranularite.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                sparqlQueries1.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (BufferedReader br = new BufferedReader(new FileReader(QUERY_PATH))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("QUERY ASK")) {
                    StringBuilder askQuery = new StringBuilder();
                    while (!(line = br.readLine()).equals("END QUERY")) {
                        askQuery.append(line).append("\n");
                    }

                    long startTime = System.currentTimeMillis();
                    boolean askResult = executeAskQuery1(conn, askQuery.toString());
                    long askExecutionTime = System.currentTimeMillis() - startTime;

                    System.out.println("Résultat de la requête ASK : " + askResult);
                    System.out.println("Temps d'exécution de la requête ASK : " + askExecutionTime + "ms");

                    if (askResult) {
                        StringBuilder selectQuery = new StringBuilder();
                        while (!(line = br.readLine()).equals("END QUERY")) {
                            selectQuery.append(line).append("\n");
                        }

                        startTime = System.currentTimeMillis();
                        TupleQueryResult selectResult = executeSelectQuery1(conn, selectQuery.toString());
                        long selectExecutionTime = System.currentTimeMillis() - startTime;

                        System.out.println("Résultat de la requête SELECT :");
                        while (selectResult.hasNext()) {
                            System.out.println(selectResult.next().toString());
                        }
                        System.out.println("Temps d'exécution de la requête SELECT : " + selectExecutionTime + "ms");
                    }
                }
            }
        
    }
      
        }
    
    private static void executeInsertQuery(String sparqlQuery) {
        
        ParameterizedSparqlString pss = new ParameterizedSparqlString();
            pss.setCommandText(sparqlQuery);
            UpdateRequest updateRequest = pss.asUpdate();

            try (RDFConnection conn = RDFConnectionFactory.connect(REPOSITORY)) {
                // Comptez le nombre de triplets avant l'insertion
                QueryExecution qeBefore = conn.query("SELECT (COUNT(*) AS ?count) WHERE { ?s ?p ?o }");
                ResultSet rsBefore = qeBefore.execSelect();
                int countBefore = rsBefore.next().getLiteral("count").getInt();

                // Exécutez la requête d'insertion
                conn.update(updateRequest);

                // Comptez le nombre de triplets après l'insertion
                QueryExecution qeAfter = conn.query("SELECT (COUNT(*) AS ?count) WHERE { ?s ?p ?o }");
                ResultSet rsAfter = qeAfter.execSelect();
                int countAfter = rsAfter.next().getLiteral("count").getInt();

                // Calculez la différence
                int tripleCount = countAfter - countBefore;

                System.out.println("Nombre de triplets ajoutés : " + tripleCount);
            } catch (Exception e) {
                e.printStackTrace();
            } 
    }
    
    private static boolean executeAskQuery1(RepositoryConnection conn, String sparqlAsk) {
        return conn.prepareBooleanQuery(sparqlAsk).evaluate();
    }

    private static TupleQueryResult executeSelectQuery1(RepositoryConnection conn, String sparqlSelect) {
        return conn.prepareTupleQuery(sparqlSelect).evaluate();
    }
    
}
